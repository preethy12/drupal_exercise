<?php

/**
 * @file
 * Implements different hook().
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\preethy_exercise\Event\UserLoginEvent;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;

// Use Drupal\Core\Entity\EntityInterface;.

/**
 * @file
 * Contains preethy_exercise.module.
 */

/**
 * Implements hook_form_alter().
 */
/* Function preethy_exercise_form_alter(&$form, FormStateInterface $form_state, $form_id) { */
// $route = \Drupal::routeMatch()->getRouteName();
// print_r($route);
// exit;
// $data = \Drupal::service('custom_service')->getName();
// print_r($data);
// exit;
// }

/**
 * Implements hook_theme().
 */
function preethy_exercise_theme($existing, $type, $theme, $path) {

  return [
    'block_plugin_template' => [
  // Lists the variable available for the template.
      'variables' => [
        'text' => "",
        'hexcode' => "",
      ],
    ],
  ];

}

/**
 * Implements hook_user_login().
 */

/**
 * Instantiate event.
 */
function preethy_exercise_user_login($account) {
  // Instantiate our event.
  $event = new UserLoginEvent($account);

  // Get the event_dispatcher service and dispatch the event.
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, UserLoginEvent::EVENT_NAME);
}

/**
 * Implements hook_page_attachments_alter().
 */
function preethy_exercise_page_attachments_alter(array &$attachments) {
$route_match = \Drupal::routeMatch();

$route_name = $route_match->getRouteName();

// Check if the current route is admin.content.comment.
if ($route_name === 'comment.admin') {
  // Modify or add attachments as needed.
  $attachments['#attached']['library'][] = 'preethy_exercise/css_lib';

}
// For view node.
elseif ($route_name == 'entity.node.canonical') {
  $attachments['#attached']['library'][] = 'preethy_exercise/css_lib';

}

// $attachments['#attached']['library'][] = 'preethy_exercise/jss_lib';
// $attachments['#attached']['drupalSettings']['preethy_exercise']['color_test'] = "pass variable from module to js";
if (in_array('custom_general/css_lib', $attachments['#attached']['library'])) {
  $index = array_search('custom_general/css_lib', $attachments['#attached']['library']);
  unset($attachments['#attached']['library'][$index]);
  // }.
}

/**
 * @file
 * Contains custom_mail.module..
 */

/**
 * Implements hook_help().
 */
function preethy_exercise_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_mail module.
    case 'help.page.preethy_exercise':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('How to send an email programmatically') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function preethy_exercise_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'create_page':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Page created: @title', ['@title' => $params['node_title']], $options);
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function preethy_exercise_entity_insert(EntityInterface $entity) {

  if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'page')) {
    return;
  }

  $mailManager = \Drupal::service('plugin.manager.mail');

  $module = 'preethy_exercise';
  $key = 'create_page';
  $to = \Drupal::currentUser()->getEmail();
  $params['message'] = $entity->get('body')->value;
  $params['node_title'] = $entity->label();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = TRUE;

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] !== TRUE) {

    \Drupal::messenger()->addMessage(t('There was a problem sending your message and it was not sent'), 'error');
    /*drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');.*/
  }
  else {

    \Drupal::messenger()->addMessage(t('There was a problem sending your message and it was not sent'), 'status');
    // drupal_set_message(t('Your message has been sent.'));.
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function preethy_exercise_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // To alter something in the build( i.e user view page)
  // alter something that  already exists.
  if ($entity->getEntityTypeId() == "node") {
    // Image field is removed.
    unset($build['field_image']);
    $build['markup'] = [
    // Static text we are adding.
      '#markup' => "<h3>Testing entity view alter hook</h3>",
    ];
  }

}

/**
 * Implements hook_entity_view().
 */
function preethy_exercise_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Condition entity type = node
  // view-gets called before the render action takes place.
  // performing action on node view.
  $session = \Drupal::request()->getSession();
  $counts = $session->get("custom_general.node_view_count", []);
  if (!isset($counts[$entity->id()])) {
    $counts[$entity->id()] = 1;
  }
  else {
    $counts[$entity->id()]++;
  }

  $session->set("custom_general.node_view_count", $counts);
  $build['count'] = [
    '#markup' => "Viewed " . $counts[$entity->id()] . " times",
    '#cache' => [
      'max-age' => 0,
    ],
  ];

}

/**
 * Implements hook_form_alter().
 */
function preethy_exercise_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "node_article_edit_form") {
    // kint($form['title']['widget']);
    $helptext = \Drupal::configFactory()->getEditable("preethy_exercise.settings")->get("helptext");
    // type: node object.
    $node = \Drupal::routeMatch()->getParameter("node");
    $token_service = \Drupal::token();
    $hlptxt = $token_service->replace($helptext, ['node' => $node], ['clear' => TRUE]); #This line replaces any tokens present in the $helptext string with their corresponding values.
    $form['#prefix'] = "<span>" . $hlptxt . "</span>";
  }
}

/**
 * Implements hook_views_pre_render().
 */
function preethy_exercise_views_pre_render(ViewExecutable $view) {
  if ($view->id() == "demo_view" && $view->getDisplay()->display['id'] == "page_1") {
    // exit;.
    $view->element['#attached']['library'][] = "preethy_exercise/jss_lib";
    $view->setTitle("our custom title");
  }
}

/**
 * Implements hook_views_post_render().
 */
function preethy_exercise_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  if ($view->id() == "demo_view" && $view->getDisplay()->display['id'] == "page_1") {
    // print_r(array_keys($output['#rows'][0]['#rows']));exit;.
    unset($output['#rows'][0]['#rows'][0]);
  }
}

/**
 * Implements hook_entity_insert().
 */


// Function preethy_exercise_entity_insert(EntityInterface $entity) {
// print_r("entity insert");
// exit;
// }
// check in custom block.

/**
 * Implements hook_entity_presave().
 */
function preethy_exercise_node_presave($node) {
  print_r($node->getCacheTags()); #returns an array of cache tags associated with the node.
  print_r($node->getCacheContexts());
  exit;
}
}
//alter the query before its executed on any view page.
function preethy_exercise_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  //print_r($view->id());exit
  //print_r(get_class($view->getDisplay()));
  if ($view->id() == "new_view" && $view->getDisplay()->display['id'] == "page_1") {
    $userid = \Drupal::currentUser()->id();//getting the current user
    //print_r($userid);exit; [1,5]
    if ($userid) {
          $user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($userid);//loading the user entityby usinguser id.
           $tag = $user_entity->get("field_shapes")->getValue(); //account-filed
           if ($tag) {
            $tagid = $tag[0]['target_id'];
            //print_r( $tagid);exit;
            // print_r($query->where);exit;
          //  print_r($query->where[0]['conditions'][0]['value'][":node__field_tags_field_tags_target_id"]);exit;
              foreach ($query->where as $key => $value) {
                  //print_r($value);
                foreach ($value['conditions'] as $k => $val)  {
                  //print_r($val);exit;
                      if ($val['field'] == " node__field_shapes_.field_shapes__target_id = :node__field_shapes__field_shapes__target_id") {
                       // print_r($val['value'] );
                        $query->where[$key]['conditions'][$k]['value'][':node__field_shapes__field_shapes__target_id'] = $tagid;
                       }
                   }
          }
        }
    }
  }
}

